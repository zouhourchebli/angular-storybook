{"version":3,"file":"store-testing.umd.js","sources":["../../../../../../modules/store/testing/src/mock_state.ts","../../../../../../modules/store/testing/src/tokens.ts","../../../../../../modules/store/testing/src/mock_store.ts","../../../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../../../modules/store/testing/src/testing.ts","../../../../../../modules/store/testing/testing.ts"],"names":["__extends","Injectable","BehaviorSubject","InjectionToken","TestBed","__values","createSelector","__param","Inject","INITIAL_STATE","ActionsSubject","ReducerManager","Store","setNgrxMockEnvironment","StateObservable"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n    ? MemoizedSelectorWithProps<any, any, Result>\n    : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n        ? U\n        : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(() => {}, (): Result => value)\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  setNgrxMockEnvironment(true);\n  return [\n    ActionsSubject,\n    MockState,\n    MockStore,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"]}